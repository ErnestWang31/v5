<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ernest</title><link>ernestwang.ca/</link><description>Recent content on ernest</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 10 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="ernestwang.ca/index.xml" rel="self" type="application/rss+xml"/><item><title>Dummy-Robotic-Arm</title><link>ernestwang.ca/dummy-robotic-arm/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><guid>ernestwang.ca/dummy-robotic-arm/</guid><description>&lt;p>&lt;strong>Quick video of the robot operating:Â &lt;a href="https://drive.google.com/file/d/19syZx1zGBMIvCTpJkcvSTVYOZutUH3FT/view?usp=sharing">dummy_move.MP4&lt;/a>&lt;/strong>
Every engineer who&amp;rsquo;s watched Iron M. n has dreamed of having their own JARVIS. While building a full-scale robotic lab assistant wasn&amp;rsquo;t realistic, I decided to create my compact desktop version that could bring that sci-fi dream to my desk.&lt;/p>
&lt;p>I named it &amp;ldquo;&lt;strong>DUMMY&lt;/strong>&amp;rdquo; as a nod to Tony Stark&amp;rsquo;s chaotic robot DUM-E. ![[Pasted image 20241109150655.png|right|250]]
A few requirements I had before making this project:&lt;/p></description></item><item><title>6-DOF Robot Kinematics</title><link>ernestwang.ca/6-dof-robot-kinematics/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>ernestwang.ca/6-dof-robot-kinematics/</guid><description>&lt;h1 id="6-dof-robot-kinematics-implementation">6-DOF Robot Kinematics Implementation&lt;/h1>
&lt;p>This document details the implementation of a 6-Degree-of-Freedom (6-DOF) robotic arm kinematics solver, including both forward kinematics (FK) and inverse kinematics (IK) calculations.&lt;/p>
&lt;h2 id="1-core-mathematical-functions">1. Core Mathematical Functions&lt;/h2>
&lt;h3 id="basic-trigonometry">Basic Trigonometry&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">cosf&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> arm_cos_f32(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">sinf&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> arm_sin_f32(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These optimized trigonometric functions use ARM&amp;rsquo;s hardware acceleration for improved performance.&lt;/p>
&lt;h3 id="matrix-operations">Matrix Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">MatMultiply&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">*&lt;/span> _matrix1, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">*&lt;/span> _matrix2, &lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">*&lt;/span> _matrixOut,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> _m, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> _l, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> _n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i, j, k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> _m; i&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> _n; j&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0f&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; k &lt;span style="color:#f92672">&amp;lt;&lt;/span> _l; k&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">+=&lt;/span> _matrix1[_l &lt;span style="color:#f92672">*&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> k] &lt;span style="color:#f92672">*&lt;/span> _matrix2[_n &lt;span style="color:#f92672">*&lt;/span> k &lt;span style="color:#f92672">+&lt;/span> j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _matrixOut[_n &lt;span style="color:#f92672">*&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> j] &lt;span style="color:#f92672">=&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Implements matrix multiplication for:&lt;/p></description></item><item><title>Dummy Robot Control System</title><link>ernestwang.ca/dummy-control-system/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>ernestwang.ca/dummy-control-system/</guid><description>&lt;h1 id="dummy-robot-control-system-documentation">Dummy Robot Control System Documentation&lt;/h1>
&lt;p>This document details the implementation of a 6-DOF robot control system, including movement control, command handling, and system management.&lt;/p>
&lt;h2 id="1-robot-configuration-and-initialization">1. Robot Configuration and Initialization&lt;/h2>
&lt;h3 id="robot-constructor">Robot Constructor&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>DummyRobot&lt;span style="color:#f92672">::&lt;/span>DummyRobot(CAN_HandleTypeDef&lt;span style="color:#f92672">*&lt;/span> _hcan)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> motorJ[ALL] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CtrlStepMotor(_hcan, &lt;span style="color:#ae81ff">0&lt;/span>, false, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">180&lt;/span>, &lt;span style="color:#ae81ff">180&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> motorJ[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CtrlStepMotor(_hcan, &lt;span style="color:#ae81ff">1&lt;/span>, true, &lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Additional joint configurations...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Key configurations for each joint:&lt;/p>
&lt;ul>
&lt;li>CAN bus communication&lt;/li>
&lt;li>Motor IDs and directions&lt;/li>
&lt;li>Gear ratios&lt;/li>
&lt;li>Joint limits&lt;/li>
&lt;li>Kinematic parameters&lt;/li>
&lt;/ul>
&lt;h2 id="2-movement-control">2. Movement Control&lt;/h2>
&lt;h3 id="joint-movement-movej">Joint Movement (MoveJ)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bool&lt;/span> DummyRobot&lt;span style="color:#f92672">::&lt;/span>MoveJ(&lt;span style="color:#66d9ef">float&lt;/span> _j1, &lt;span style="color:#66d9ef">float&lt;/span> _j2, &lt;span style="color:#66d9ef">float&lt;/span> _j3, &lt;span style="color:#66d9ef">float&lt;/span> _j4, &lt;span style="color:#66d9ef">float&lt;/span> _j5, &lt;span style="color:#66d9ef">float&lt;/span> _j6)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Validate joint limits
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Calculate movement times
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Set joint speeds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Execute movement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Features:&lt;/p></description></item><item><title>robosoccer-progress</title><link>ernestwang.ca/robosoccer-progress/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>ernestwang.ca/robosoccer-progress/</guid><description>&lt;p>I will be updating the progress for RoboSoccer here!&lt;/p></description></item><item><title>Stepper Motor Control System</title><link>ernestwang.ca/stepper-motor-control-system/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>ernestwang.ca/stepper-motor-control-system/</guid><description>&lt;p>This document explains the implementation of a stepper motor controller used in robotics applications. The system provides comprehensive control over stepper motors with built-in safety features and precise movement control.&lt;/p>
&lt;h2 id="1-motor-configuration">1. Motor Configuration&lt;/h2>
&lt;p>The motor controller is initialized with specific parameters for each motor:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>CtrlStepMotor&lt;span style="color:#f92672">::&lt;/span>CtrlStepMotor(CAN_HandleTypeDef&lt;span style="color:#f92672">*&lt;/span> _hcan, &lt;span style="color:#66d9ef">uint8_t&lt;/span> _id, &lt;span style="color:#66d9ef">bool&lt;/span> _inverse,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> _reduction, &lt;span style="color:#66d9ef">float&lt;/span> _angleLimitMin, &lt;span style="color:#66d9ef">float&lt;/span> _angleLimitMax)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each motor has:&lt;/p>
&lt;ul>
&lt;li>A unique ID for communication&lt;/li>
&lt;li>Direction settings (normal or inverse)&lt;/li>
&lt;li>Gear reduction ratio&lt;/li>
&lt;li>Angle limits for safety&lt;/li>
&lt;/ul>
&lt;h2 id="2-communication-protocol">2. Communication Protocol&lt;/h2>
&lt;p>The system uses CAN bus communication with a specific message format:&lt;/p></description></item><item><title>wheeled-legged robot</title><link>ernestwang.ca/wheeled-legged-robot/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>ernestwang.ca/wheeled-legged-robot/</guid><description>&lt;p>Ever watched Boston Dynamics&amp;rsquo; robots pulling off incredible stunts but thought &amp;ldquo;there&amp;rsquo;s got to be a simpler way&amp;rdquo;? After diving into a research paper on wheel-legged robots and seeing the explosion of humanoid robots everywhere, I couldn&amp;rsquo;t shake the feeling that we&amp;rsquo;re overcomplicating robot mobility. So I set out to build something that combines the best of both worlds - the stability of wheels with the adaptability of legs!&lt;img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXew4-WFsULSy8zlU9z0digVlPpTL0ZACiuGoFv8NriuW8JDvFky-f3p3gICxFkK6WqptSHuuh9GcDYdRX-gRsPlHrka5EntRmvjq9Ef0XJ86Gdu9Rc70H7tidh1rEDJlYuBfSfDyR3CqfwGWEetwB6DBYOE?key=zwGjVZ7EjAL1kdZw6LWOIA" alt="">&lt;/p>
&lt;p>Before jumping into CAD, I laid out some key goals:&lt;/p></description></item><item><title/><link>ernestwang.ca/encoder-calibration-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>ernestwang.ca/encoder-calibration-system/</guid><description>&lt;p>This document details the implementation of an encoder calibration system for precise stepper motor position control.&lt;/p>
&lt;h2 id="1-system-overview">1. System Overview&lt;/h2>
&lt;h3 id="basic-architecture">Basic Architecture&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EncoderBase&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint16_t&lt;/span> rawAngle; &lt;span style="color:#75715e">// raw data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint16_t&lt;/span> rectifiedAngle; &lt;span style="color:#75715e">// calibrated rawAngle data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> rectifyValid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } AngleData_t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int32_t&lt;/span> RESOLUTION &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">int32_t&lt;/span>)((&lt;span style="color:#ae81ff">0x00000001U&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>)); &lt;span style="color:#75715e">// 16384 points
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Key features:&lt;/p>
&lt;ul>
&lt;li>14-bit resolution (16384 positions)&lt;/li>
&lt;li>Raw and calibrated angle tracking&lt;/li>
&lt;li>Validation system for calibration data&lt;/li>
&lt;/ul>
&lt;h2 id="2-calibration-process">2. Calibration Process&lt;/h2>
&lt;h3 id="state-machine">State Machine&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_DISABLE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_FORWARD_PREPARE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_FORWARD_MEASURE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_BACKWARD_RETURN,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_BACKWARD_GAP_DISMISS,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_BACKWARD_MEASURE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CALI_CALCULATING,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} State_t;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Calibration steps:&lt;/p></description></item><item><title/><link>ernestwang.ca/motion-control-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>ernestwang.ca/motion-control-system/</guid><description>&lt;p>This document details the implementation of a motion control system that includes motion planning and motor control for precise movement control.&lt;/p>
&lt;h2 id="1-motion-planner">1. Motion Planner&lt;/h2>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>The Motion Planner implements various tracking mechanisms for smooth motion control:&lt;/p>
&lt;ul>
&lt;li>Current tracking&lt;/li>
&lt;li>Velocity tracking&lt;/li>
&lt;li>Position tracking&lt;/li>
&lt;li>Position interpolation&lt;/li>
&lt;li>Trajectory tracking&lt;/li>
&lt;/ul>
&lt;h3 id="tracker-components">Tracker Components&lt;/h3>
&lt;h4 id="current-tracker">Current Tracker&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> MotionPlanner&lt;span style="color:#f92672">::&lt;/span>CurrentTracker&lt;span style="color:#f92672">::&lt;/span>CalcSoftGoal(&lt;span style="color:#66d9ef">int32_t&lt;/span> _goalCurrent)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> deltaCurrent &lt;span style="color:#f92672">=&lt;/span> _goalCurrent &lt;span style="color:#f92672">-&lt;/span> trackCurrent;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Current ramping logic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Features:&lt;/p>
&lt;ul>
&lt;li>Smooth current transitions&lt;/li>
&lt;li>Current limiting&lt;/li>
&lt;li>Bi-directional control&lt;/li>
&lt;/ul>
&lt;h4 id="velocity-tracker">Velocity Tracker&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> MotionPlanner&lt;span style="color:#f92672">::&lt;/span>VelocityTracker&lt;span style="color:#f92672">::&lt;/span>CalcSoftGoal(&lt;span style="color:#66d9ef">int32_t&lt;/span> _goalVelocity)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> deltaVelocity &lt;span style="color:#f92672">=&lt;/span> _goalVelocity &lt;span style="color:#f92672">-&lt;/span> trackVelocity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Velocity ramping logic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Implements:&lt;/p></description></item><item><title/><link>ernestwang.ca/motor-driver-and-foc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>ernestwang.ca/motor-driver-and-foc/</guid><description>&lt;p>This document explains the implementation of a motor driver system using Field-Oriented Control (FOC) with sine wave lookup tables for efficient operation.&lt;/p>
&lt;h2 id="1-sine-wave-lookup-table">1. Sine Wave Lookup Table&lt;/h2>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define sin_pi_m2_dpix 1024
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define sin_pi_m2_dpiybit 12
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int16_t&lt;/span> sin_pi_m2[sin_pi_m2_dpix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">25&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">75&lt;/span>, &lt;span style="color:#ae81ff">101&lt;/span>, ... &lt;span style="color:#75715e">// Full sine wave table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Key features:&lt;/p>
&lt;ul>
&lt;li>1024-point resolution for high precision&lt;/li>
&lt;li>Fixed-point arithmetic for efficiency&lt;/li>
&lt;li>Symmetrical positive and negative values&lt;/li>
&lt;li>12-bit precision for DAC output&lt;/li>
&lt;/ul>
&lt;p>Benefits:&lt;/p>
&lt;ul>
&lt;li>Faster than real-time calculation&lt;/li>
&lt;li>Consistent timing&lt;/li>
&lt;li>Reduced CPU load&lt;/li>
&lt;li>Suitable for embedded systems&lt;/li>
&lt;/ul>
&lt;h2 id="2-driver-base-class">2. Driver Base Class&lt;/h2>
&lt;h3 id="interface-definition">Interface Definition&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DriverBase&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Init() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">SetFocCurrentVector&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> _directionInCount, &lt;span style="color:#66d9ef">int32_t&lt;/span> _current_mA) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Sleep&lt;/span>() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Brake&lt;/span>() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> SetTwoCoilsCurrent(&lt;span style="color:#66d9ef">uint16_t&lt;/span> _currentA_mA, &lt;span style="color:#66d9ef">uint16_t&lt;/span> _currentB_mA) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Fast sine lookup structures
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> FastSinToDac_t phaseB{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FastSinToDac_t phaseA{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Features:&lt;/p></description></item></channel></rss>